import os
import re
import logging
import hashlib
from datetime import datetime, timedelta
from typing import Final, Optional

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
from openpyxl import Workbook, load_workbook

TOKEN = "8164683944:AAFblJC8b6i_2_poEqb7qnMnLd0WElfgG6Q"
BOT_USERNAME: Final = '@MepiDonor_bot'
ADMIN_PASSWORD_HASH = "5d5b09f6dcb2d53a5fffc60c4ac0d55fabdf556069d6631545f42aa6e3500f2e"
EXCEL_FILE = "donor_data.xlsx"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

COLUMNS = [
    "ID",
    "Telegram ID",
    "–§–ò–û",
    "–ì—Ä—É–ø–ø–∞",
    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
    "–ö–æ–ª-–≤–æ –ì–∞–≤—Ä–∏–ª–æ–≤–∞",
    "–ö–æ–ª-–≤–æ –§–ú–ë–ê",
    "–°—É–º–º–∞ –¥–æ–Ω–∞—Ü–∏–π",
    "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–Ω–∞—Ü–∏–∏ –ì–∞–≤—Ä–∏–ª–æ–≤–∞",
    "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–Ω–∞—Ü–∏–∏ –§–ú–ë–ê",
    "–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–æ—Ü—Å–µ—Ç–∏",
    "–¢–µ–ª–µ—Ñ–æ–Ω",
    "–í —Ä–µ–≥–∏—Å—Ç—Ä–µ –î–ö–ú",
    "–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É",
    "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
    "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä",
    "DonorCoin"
]

def init_excel():
    if not os.path.exists(EXCEL_FILE):
        wb = Workbook()
        ws = wb.active
        ws.title = "–î–æ–Ω–æ—Ä—ã"
        ws.append(COLUMNS)
        wb.save(EXCEL_FILE)


def add_donor(data: dict):
    wb = load_workbook(EXCEL_FILE)
    ws = wb.active

    donor_id = ws.max_row

    ws.append([
        donor_id,
        data.get('telegram_id'),
        data.get('full_name'),
        data.get('group'),
        data.get('category'),
        0,
        0,
        0,
        "",
        "",
        "",
        data.get('phone'),
        False,
        data.get('mailing_consent', False),
        datetime.now().strftime("%Y-%m-%d"),
        data.get('is_organizer', False),
        0  # DonorCoin
    ])

    wb.save(EXCEL_FILE)


def get_donor_by_telegram_id(telegram_id: int) -> Optional[dict]:
    wb = load_workbook(EXCEL_FILE)
    ws = wb.active

    for row in ws.iter_rows(min_row=2, values_only=True):
        if row[1] == telegram_id:
            return {
                'id': row[0],
                'telegram_id': row[1],
                'full_name': row[2],
                'group': row[3],
                'category': row[4],
                'gavrilovo_count': row[5],
                'fmba_count': row[6],
                'total_amount': row[7],
                'last_gavrilovo': row[8],
                'last_fmba': row[9],
                'social_contacts': row[10],
                'phone': row[11],
                'dkm_member': row[12],
                'mailing_consent': row[13],
                'registered_at': row[14],
                'is_organizer': row[15],
                'donor_coin': row[16]
            }
    return None


def update_donor(telegram_id: int, data: dict) -> bool:
    wb = load_workbook(EXCEL_FILE)
    ws = wb.active

    for row in ws.iter_rows(min_row=2):
        if row[1].value == telegram_id:
            for key, value in data.items():
                if key == 'full_name':
                    row[2].value = value
                elif key == 'group':
                    row[3].value = value
                elif key == 'category':
                    row[4].value = value
                elif key == 'phone':
                    row[11].value = value
                elif key == 'dkm_member':
                    row[12].value = value
                elif key == 'mailing_consent':
                    row[13].value = value
                elif key == 'is_organizer':
                    row[15].value = value
                elif key == 'gavrilovo_count':
                    row[5].value = value
                elif key == 'fmba_count':
                    row[6].value = value
                elif key == 'last_gavrilovo':
                    row[8].value = value
                elif key == 'last_fmba':
                    row[9].value = value
                elif key == 'social_contacts':
                    row[10].value = value
                elif key == 'total_amount':
                    row[7].value = value
                elif key == 'donor_coin':
                    row[16].value = value

            wb.save(EXCEL_FILE)
            return True

    return False


def get_all_donors():
    wb = load_workbook(EXCEL_FILE)
    ws = wb.active

    donors = []
    for row in ws.iter_rows(min_row=2, values_only=True):
        donors.append({
            'id': row[0],
            'telegram_id': row[1],
            'full_name': row[2],
            'group': row[3],
            'category': row[4],
            'gavrilovo_count': row[5],
            'fmba_count': row[6],
            'total_amount': row[7],
            'last_gavrilovo': row[8],
            'last_fmba': row[9],
            'social_contacts': row[10],
            'phone': row[11],
            'dkm_member': row[12],
            'mailing_consent': row[13],
            'registered_at': row[14],
            'is_organizer': row[15],
            'donor_coin': row[16]
        })

    return donors


def add_donation(telegram_id: int, center: str, date: str):
    donor = get_donor_by_telegram_id(telegram_id)
    if not donor:
        return False

    if "–≥–∞–≤—Ä–∏–ª–æ–≤–∞" in center.lower():
        update_data = {
            'gavrilovo_count': donor['gavrilovo_count'] + 1,
            'last_gavrilovo': date,
            'total_amount': donor['total_amount'] + 1,
            'donor_coin': donor['donor_coin'] + 500
        }
    else:
        update_data = {
            'fmba_count': donor['fmba_count'] + 1,
            'last_fmba': date,
            'total_amount': donor['total_amount'] + 1,
            'donor_coin': donor['donor_coin'] + 500
        }

    return update_donor(telegram_id, update_data)


def get_donations_stats():
    wb = load_workbook(EXCEL_FILE)
    ws = wb.active

    total_gavrilovo = 0
    total_fmba = 0
    total_donors = ws.max_row - 1

    for row in ws.iter_rows(min_row=2, values_only=True):
        total_gavrilovo += row[5] or 0
        total_fmba += row[6] or 0

    return {
        'total_donors': total_donors,
        'total_gavrilovo': total_gavrilovo,
        'total_fmba': total_fmba,
        'total_donations': total_gavrilovo + total_fmba
    }

class RegistrationStates(StatesGroup):
    phone = State()
    full_name = State()
    category = State()
    group = State()
    consent = State()
    mailing_consent = State()


class OrganizerRegistrationStates(StatesGroup):
    password = State()
    full_name = State()


class DonationDayStates(StatesGroup):
    select_day = State()
    confirm = State()


class QuestionStates(StatesGroup):
    input_question = State()


class OrganizerAnswerStates(StatesGroup):
    select_question = State()
    input_answer = State()


class MailingStates(StatesGroup):
    select_recipients = State()
    input_message = State()
    confirm = State()


class ShopStates(StatesGroup):
    browse = State()
    view_item = State()
    confirm_purchase = State()

def validate_full_name(full_name: str) -> bool:
    pattern = r'^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+(?:\s[–ê-–Ø–Å][–∞-—è—ë]+)?$'
    return re.fullmatch(pattern, full_name) is not None


async def is_user_registered(telegram_id: int) -> bool:
    return get_donor_by_telegram_id(telegram_id) is not None


async def is_organizer(telegram_id: int) -> bool:
    donor = get_donor_by_telegram_id(telegram_id)
    return donor and donor.get('is_organizer', False)


async def get_user_info(telegram_id: int) -> Optional[dict]:
    return get_donor_by_telegram_id(telegram_id)


async def get_upcoming_donation_days(for_mifi: bool = True) -> list:
    return [
        {'id': 1, 'date': (datetime.now() + timedelta(days=7)).strftime("%Y-%m-%d"),
         'center': '–ì–∞–≤—Ä–∏–ª–æ–≤–∞', 'external_link': ''},
        {'id': 2, 'date': (datetime.now() + timedelta(days=14)).strftime("%Y-%m-%d"),
         'center': '–§–ú–ë–ê', 'external_link': ''}
    ]


async def get_donor_balance(telegram_id: int) -> int:
    donor = get_donor_by_telegram_id(telegram_id)
    return donor.get('donor_coin', 0) if donor else 0


async def show_personal_cabinet(message: types.Message):
    user_info = await get_user_info(message.from_user.id)
    if not user_info:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –î–µ–Ω—å –î–æ–Ω–æ—Ä–∞", callback_data="register_dd")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="my_data")],
            [InlineKeyboardButton(text="ü©∏ –ò—Å—Ç–æ—Ä–∏—è –¥–æ–Ω–∞—Ü–∏–π", callback_data="donation_history")],
            [InlineKeyboardButton(text="üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω –º–µ—Ä—á–∞", callback_data="shop")],
            [InlineKeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É", callback_data="ask_question")],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ", callback_data="donation_info")],
        ]
    )

    await message.answer(
        f"üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
        f"<b>–§–ò–û:</b> {user_info['full_name']}\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {user_info['category']}\n"
        f"<b>–ì—Ä—É–ø–ø–∞/—Å—Ç–∞—Ç—É—Å:</b> {user_info['group'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"<b>–î–æ–Ω–∞—Ü–∏–π –≤ –ì–∞–≤—Ä–∏–ª–æ–≤–∞:</b> {user_info['gavrilovo_count']}\n"
        f"<b>–î–æ–Ω–∞—Ü–∏–π –≤ –§–ú–ë–ê:</b> {user_info['fmba_count']}\n"
        f"<b>–í—Å–µ–≥–æ –¥–æ–Ω–∞—Ü–∏–π:</b> {user_info['total_amount']}\n"
        f"<b>DonorCoin:</b> {user_info['donor_coin']}\n"
        f"<b>–í —Ä–µ–≥–∏—Å—Ç—Ä–µ –î–ö–ú:</b> {'–î–∞' if user_info['dkm_member'] else '–ù–µ—Ç'}\n"
        f"<b>–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É:</b> {'–î–∞' if user_info['mailing_consent'] else '–ù–µ—Ç'}\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb
    )


async def show_organizer_panel(message: types.Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –î–µ–Ω—å –î–æ–Ω–æ—Ä–∞", callback_data="create_dd")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å—ã –æ—Ç –¥–æ–Ω–æ—Ä–æ–≤", callback_data="view_questions")],
            [InlineKeyboardButton(text="üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="make_mailing")],
            [InlineKeyboardButton(text="üõçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º", callback_data="manage_shop")],
            [InlineKeyboardButton(text="üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="export_data")]
        ]
    )

    await message.answer(
        "üë®‚Äç‚öïÔ∏è <b>–ü–∞–Ω–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb
    )
@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    if await is_organizer(message.from_user.id):
        await show_organizer_panel(message)
    elif await is_user_registered(message.from_user.id):
        await show_personal_cabinet(message)
    else:
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)],
                [KeyboardButton(text="üë®‚Äç‚öïÔ∏è –Ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –î–Ω—è –î–æ–Ω–æ—Ä–∞ –≤ –ù–ò–Ø–£ –ú–ò–§–ò.\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n"
            "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –¥–æ–Ω–æ—Ä\n"
            "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –î–µ–Ω—å –î–æ–Ω–æ—Ä–∞\n"
            "üìä –°–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π –¥–æ–Ω–∞—Ü–∏–π\n"
            "üõçÔ∏è –ü–æ–∫—É–ø–∞—Ç—å –º–µ—Ä—á –∑–∞ DonorCoin\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ '–Ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä':",
            reply_markup=kb
        )
        await state.set_state(RegistrationStates.phone)


@dp.message(RegistrationStates.phone, F.text == "üë®‚Äç‚öïÔ∏è –Ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä")
async def organizer_auth(message: types.Message, state: FSMContext):
    await message.answer(
        "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –ø–∞–Ω–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(OrganizerRegistrationStates.password)


@dp.message(OrganizerRegistrationStates.password)
async def organizer_password_check(message: types.Message, state: FSMContext):
    password = message.text.strip()
    hashed_password = hashlib.sha256(password.encode()).hexdigest()
    print(hashed_password)
    logger.info(f"Input password hash: {hashed_password}")

    if hashed_password != ADMIN_PASSWORD_HASH:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await message.answer(
        "‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(OrganizerRegistrationStates.full_name)

@dp.message(OrganizerRegistrationStates.full_name)
async def organizer_registration_complete(message: types.Message, state: FSMContext):
    full_name = message.text.strip()

    if not validate_full_name(full_name):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ"
        )
        return
    donor = get_donor_by_telegram_id(message.from_user.id)
    if donor:
        update_donor(message.from_user.id, {
            'full_name': full_name,
            'is_organizer': True,
            'mailing_consent': True,
            'dkm_member': True
        })
    else:
        add_donor({
            'telegram_id': message.from_user.id,
            'full_name': full_name,
            'phone': "organizer",
            'category': "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä",
            'is_organizer': True,
            'mailing_consent': True,
            'dkm_member': True
        })

    await message.answer(
        "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä!\n\n"
        f"<b>–§–ò–û:</b> {full_name}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–∞–Ω–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()
    await show_organizer_panel(message)


@dp.message(RegistrationStates.phone, F.contact)
async def contact_received(message: types.Message, state: FSMContext):
    phone = message.contact.phone_number
    await state.update_data(phone=phone)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(RegistrationStates.full_name)


@dp.message(RegistrationStates.full_name)
async def full_name_received(message: types.Message, state: FSMContext):
    full_name = message.text.strip()

    if not validate_full_name(full_name):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –ø–æ–ª–Ω–æ–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<b>–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ</b> (–µ—Å–ª–∏ –µ—Å—Ç—å) —Å –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤.\n"
            "–ü—Ä–∏–º–µ—Ä: <i>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</i> –∏–ª–∏ <i>–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞</i>"
        )
        return

    await state.update_data(full_name=full_name)

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°—Ç—É–¥–µ–Ω—Ç")],
            [KeyboardButton(text="–°–æ—Ç—Ä—É–¥–Ω–∏–∫")],
            [KeyboardButton(text="–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=kb
    )
    await state.set_state(RegistrationStates.category)


@dp.message(RegistrationStates.category)
async def category_received(message: types.Message, state: FSMContext):
    category = message.text.lower()
    valid_categories = ['—Å—Ç—É–¥–µ–Ω—Ç', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '–≤–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä']

    if category not in valid_categories:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        return

    await state.update_data(category=category)

    if category == '—Å—Ç—É–¥–µ–Ω—Ç':
        await message.answer(
            "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(RegistrationStates.group)
    else:
        await state.update_data(group=None)
        await ask_for_consent(message, state)


@dp.message(RegistrationStates.group)
async def group_received(message: types.Message, state: FSMContext):
    group = message.text.strip()
    await state.update_data(group=group)
    await ask_for_consent(message, state)


async def ask_for_consent(message: types.Message, state: FSMContext):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ", callback_data="consent_yes")],
            [InlineKeyboardButton(text="‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_no")]
        ]
    )

    await message.answer(
        "‚ùó –ü–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ:\n\n"
        "–Ø —Å–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º –∑–∞–∫–æ–Ω–æ–º ‚Ññ152-–§–ó.",
        reply_markup=kb
    )
    await state.set_state(RegistrationStates.consent)


@dp.callback_query(RegistrationStates.consent, F.data.startswith("consent_"))
async def consent_received(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "consent_no":
        await callback.message.answer(
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö "
            "–º—ã –Ω–µ –º–æ–∂–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –∫–∞–∫ –¥–æ–Ω–æ—Ä–∞."
        )
        await state.clear()
        return

    await state.update_data(consent=True)

    data = await state.get_data()
    category = data.get('category', '')

    mailing_text = (
        "–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –î–Ω—è—Ö –î–æ–Ω–æ—Ä–∞ "
        "–∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–æ–Ω–æ—Ä—Å—Ç–≤–æ–º?"
    )

    if category == '–≤–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä':
        mailing_text = (
            "–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö "
            "–¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –¥–æ–Ω–æ—Ä–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö —Å–¥–∞—Ç—å –∫—Ä–æ–≤—å?"
        )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="mailing_yes")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="mailing_no")]
        ]
    )

    await callback.message.answer(
        mailing_text,
        reply_markup=kb
    )
    await state.set_state(RegistrationStates.mailing_consent)
    await callback.answer()


@dp.callback_query(RegistrationStates.mailing_consent, F.data.startswith("mailing_"))
async def mailing_consent_received(callback: types.CallbackQuery, state: FSMContext):
    mailing_consent = callback.data == "mailing_yes"
    await state.update_data(mailing_consent=mailing_consent)

    data = await state.get_data()
    if get_donor_by_telegram_id(callback.from_user.id):
        await callback.message.answer("‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        await state.clear()
        return

    add_donor({
        'telegram_id': callback.from_user.id,
        'phone': data['phone'],
        'full_name': data['full_name'],
        'category': data['category'],
        'group': data.get('group'),
        'mailing_consent': mailing_consent
    })

    mailing_status = "–î–∞" if mailing_consent else "–ù–µ—Ç"
    await callback.message.answer(
        "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"<b>–§–ò–û:</b> {data['full_name']}\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {data['category']}\n"
        f"<b>–ì—Ä—É–ø–ø–∞:</b> {data.get('group', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"<b>–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É:</b> {mailing_status}\n\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –î–µ–Ω—å –î–æ–Ω–æ—Ä–∞ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
        reply_markup=ReplyKeyboardRemove()
    )

    await show_personal_cabinet(callback.message)
    await state.clear()


@dp.callback_query(F.data == "my_data")
async def show_user_data(callback: types.CallbackQuery):
    user_info = await get_user_info(callback.from_user.id)
    if not user_info:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.")
        return

    balance = await get_donor_balance(callback.from_user.id)

    await callback.message.answer(
        f"üìã <b>–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ</b>\n\n"
        f"<b>–§–ò–û:</b> {user_info['full_name']}\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {user_info['category']}\n"
        f"<b>–ì—Ä—É–ø–ø–∞/—Å—Ç–∞—Ç—É—Å:</b> {user_info['group'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"<b>–î–æ–Ω–∞—Ü–∏–π –≤ –ì–∞–≤—Ä–∏–ª–æ–≤–∞:</b> {user_info['gavrilovo_count']}\n"
        f"<b>–î–æ–Ω–∞—Ü–∏–π –≤ –§–ú–ë–ê:</b> {user_info['fmba_count']}\n"
        f"<b>–í—Å–µ–≥–æ –¥–æ–Ω–∞—Ü–∏–π:</b> {user_info['total_amount']}\n"
        f"<b>DonorCoin:</b> {balance}\n"
        f"<b>–í —Ä–µ–≥–∏—Å—Ç—Ä–µ –î–ö–ú:</b> {'–î–∞' if user_info['dkm_member'] else '–ù–µ—Ç'}\n"
        f"<b>–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É:</b> {'–î–∞' if user_info['mailing_consent'] else '–ù–µ—Ç'}\n\n"
        "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É."
    )
    await callback.answer()


@dp.callback_query(F.data == "donation_history")
async def show_donation_history(callback: types.CallbackQuery):
    user_info = await get_user_info(callback.from_user.id)
    if not user_info:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.")
        return

    text = "ü©∏ <b>–ò—Å—Ç–æ—Ä–∏—è –¥–æ–Ω–∞—Ü–∏–π</b>\n\n"

    if user_info['last_gavrilovo']:
        text += (
            f"<b>–¶–µ–Ω—Ç—Ä:</b> –ì–∞–≤—Ä–∏–ª–æ–≤–∞\n"
            f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–Ω–∞—Ü–∏–π:</b> {user_info['gavrilovo_count']}\n"
            f"<b>–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–Ω–∞—Ü–∏—è:</b> {user_info['last_gavrilovo']}\n\n"
        )

    if user_info['last_fmba']:
        text += (
            f"<b>–¶–µ–Ω—Ç—Ä:</b> –§–ú–ë–ê\n"
            f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–Ω–∞—Ü–∏–π:</b> {user_info['fmba_count']}\n"
            f"<b>–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–Ω–∞—Ü–∏—è:</b> {user_info['last_fmba']}\n\n"
        )

    if not user_info['last_gavrilovo'] and not user_info['last_fmba']:
        text += "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–Ω–∞—Ü–∏–π."

    await callback.message.answer(text)
    await callback.answer()


@dp.callback_query(F.data == "donation_info")
async def show_donation_info(callback: types.CallbackQuery):
    text = (
        "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ</b>\n\n"
        "üîπ <b>–ü–µ—Ä–µ–¥ —Å–¥–∞—á–µ–π –∫—Ä–æ–≤–∏:</b>\n"
        "- –í—ã—Å–ø–∏—Ç–µ—Å—å\n"
        "- –ü–∏—Ç–∞–π—Ç–µ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞ 2 –¥–Ω—è –¥–æ –¥–æ–Ω–∞—Ü–∏–∏\n"
        "- –ù–µ —É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –∞–ª–∫–æ–≥–æ–ª—å –∑–∞ 48 —á–∞—Å–æ–≤\n"
        "- –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã\n\n"
        "üîπ <b>–ü–æ—Å–ª–µ —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏:</b>\n"
        "- –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ 10-15 –º–∏–Ω—É—Ç\n"
        "- –ù–µ –∫—É—Ä–∏—Ç–µ 2 —á–∞—Å–∞\n"
        "- –ù–µ —Å–Ω–∏–º–∞–π—Ç–µ –ø–æ–≤—è–∑–∫—É 3-4 —á–∞—Å–∞\n"
        "- –ò–∑–±–µ–≥–∞–π—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫\n\n"
        "üìå –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ <a href='https://mephi.ru'>mephi.ru</a>"
    )
    await callback.message.answer(text, disable_web_page_preview=True)
    await callback.answer()


@dp.callback_query(F.data == "ask_question")
async def ask_question(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(QuestionStates.input_question)
    await callback.answer()


@dp.message(QuestionStates.input_question)
async def question_received(message: types.Message, state: FSMContext):
    question = message.text.strip()

    if len(question) < 10:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏.")
        return

    user_info = await get_user_info(message.from_user.id)
    if not user_info:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.")
        await state.clear()
        return

    await message.answer(
        "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º. "
        "–ú—ã –ø—Ä–∏—à–ª–µ–º –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤."
    )
    await state.clear()


@dp.callback_query(F.data == "register_dd")
async def register_for_donation_day(callback: types.CallbackQuery, state: FSMContext):
    if not await is_user_registered(callback.from_user.id):
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏ /start")
        await callback.answer()
        return

    user_info = await get_user_info(callback.from_user.id)
    if not user_info:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.")
        await callback.answer()
        return

    is_mifi = user_info['category'] in ['—Å—Ç—É–¥–µ–Ω—Ç', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫']
    days = await get_upcoming_donation_days(for_mifi=is_mifi)

    if not days:
        await callback.message.answer("‚ùå –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –î–Ω–µ–π –î–æ–Ω–æ—Ä–∞.")
        await callback.answer()
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for day in days:
        kb.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{day['date']} ({day['center']})",
                callback_data=f"dd_day_{day['id']}"
            )
        ])

    await callback.message.answer(
        "üìÖ –í—ã–±–µ—Ä–∏ –î–µ–Ω—å –î–æ–Ω–æ—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏:",
        reply_markup=kb
    )
    await state.set_state(DonationDayStates.select_day)
    await callback.answer()


@dp.callback_query(DonationDayStates.select_day, F.data.startswith("dd_day_"))
async def donation_day_selected(callback: types.CallbackQuery, state: FSMContext):
    day_id = int(callback.data.split("_")[2])
    await state.update_data(day_id=day_id)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="dd_confirm")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="dd_cancel")]
        ]
    )

    days = await get_upcoming_donation_days()
    selected_day = next((day for day in days if day['id'] == day_id), None)

    if not selected_day:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    await callback.message.answer(
        f"–¢—ã –≤—ã–±—Ä–∞–ª –î–µ–Ω—å –î–æ–Ω–æ—Ä–∞:\n\n"
        f"<b>–î–∞—Ç–∞:</b> {selected_day['date']}\n"
        f"<b>–¶–µ–Ω—Ç—Ä:</b> {selected_day['center']}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∑–∞–ø–∏—Å—å:",
        reply_markup=kb
    )
    await state.set_state(DonationDayStates.confirm)
    await callback.answer()


@dp.callback_query(DonationDayStates.confirm, F.data == "dd_confirm")
async def donation_day_confirmed(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    day_id = data['day_id']

    days = await get_upcoming_donation_days()
    selected_day = next((day for day in days if day['id'] == day_id), None)

    if not selected_day:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–µ–Ω—å –¥–æ–Ω–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    if add_donation(callback.from_user.id, selected_day['center'], selected_day['date']):
        await callback.message.answer(
            "‚úÖ –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –î–µ–Ω—å –î–æ–Ω–æ—Ä–∞!\n\n"
            f"<b>–î–∞—Ç–∞:</b> {selected_day['date']}\n"
            f"<b>–¶–µ–Ω—Ç—Ä:</b> {selected_day['center']}\n\n"
            "–ú—ã –ø—Ä–∏—à–ª–µ–º —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ —Å–æ–±—ã—Ç–∏—è."
        )
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()
    await callback.answer()


@dp.callback_query(F.data == "donation_confirmed")
async def confirm_donation(callback: types.CallbackQuery):
    donor_id = callback.from_user.id
    donor = get_donor_by_telegram_id(donor_id)

    if donor:
        new_balance = donor['donor_coin'] + 500
        update_donor(donor_id, {'donor_coin': new_balance})

        await callback.message.answer(
            "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–∞—Ü–∏—é! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 500 DonorCoin!\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –∏—Ö –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –º–µ—Ä—á–∞."
        )
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await callback.answer()


@dp.callback_query(F.data == "shop")
async def show_shop(callback: types.CallbackQuery, state: FSMContext):
    items = [
        {'id': 1, 'name': '–§—É—Ç–±–æ–ª–∫–∞ "–Ø –¥–æ–Ω–æ—Ä"', 'price': 300},
        {'id': 2, 'name': '–ó–Ω–∞—á–æ–∫ –¥–æ–Ω–æ—Ä–∞', 'price': 150},
        {'id': 3, 'name': '–¢–µ—Ä–º–æ—Å', 'price': 500},
        {'id': 4, 'name': '–ë—Ä–∞—Å–ª–µ—Ç', 'price': 200}
    ]

    balance = await get_donor_balance(callback.from_user.id)

    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for item in items:
        kb.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{item['name']} - {item['price']} DonorCoin",
                callback_data=f"item_{item['id']}"
            )
        ])

    kb.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_cabinet")
    ])

    await callback.message.answer(
        f"üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω –º–µ—Ä—á–∞</b>\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance} DonorCoin</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=kb
    )
    await state.set_state(ShopStates.browse)
    await callback.answer()


@dp.callback_query(ShopStates.browse, F.data.startswith("item_"))
async def view_shop_item(callback: types.CallbackQuery, state: FSMContext):
    item_id = int(callback.data.split("_")[1])

    items = {
        1: {'name': '–§—É—Ç–±–æ–ª–∫–∞ "–Ø –¥–æ–Ω–æ—Ä"', 'description': '–°—Ç–∏–ª—å–Ω–∞—è —Ö–ª–æ–ø–∫–æ–≤–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞', 'price': 300},
        2: {'name': '–ó–Ω–∞—á–æ–∫ –¥–æ–Ω–æ—Ä–∞', 'description': '–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –∑–Ω–∞—á–æ–∫', 'price': 150},
        3: {'name': '–¢–µ—Ä–º–æ—Å', 'description': '–¢–µ—Ä–º–æ—Å —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –¥–æ–Ω–æ—Ä—Å—Ç–≤–∞', 'price': 500},
        4: {'name': '–ë—Ä–∞—Å–ª–µ—Ç', 'description': '–°–∏–ª–∏–∫–æ–Ω–æ–≤—ã–π –±—Ä–∞—Å–ª–µ—Ç', 'price': 200}
    }

    item = items.get(item_id)
    if not item:
        await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    balance = await get_donor_balance(callback.from_user.id)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_{item_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_shop")]
    ])

    await callback.message.answer(
        f"üõçÔ∏è <b>{item['name']}</b>\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item['description']}\n"
        f"üí∞ –¶–µ–Ω–∞: <b>{item['price']} DonorCoin</b>\n"
        f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance} DonorCoin</b>",
        reply_markup=kb
    )
    await state.set_state(ShopStates.view_item)
    await state.update_data(item_id=item_id, item_price=item['price'])
    await callback.answer()


@dp.callback_query(ShopStates.view_item, F.data.startswith("buy_"))
async def confirm_purchase(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    item_id = data['item_id']
    item_price = data['item_price']
    balance = await get_donor_balance(callback.from_user.id)

    if balance < item_price:
        await callback.message.answer(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ DonorCoin –¥–ª—è –ø–æ–∫—É–ø–∫–∏.\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} | –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {item_price}"
        )
        await callback.answer()
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_buy_{item_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"item_{item_id}")]
    ])

    await callback.message.answer(
        "‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –∑–∞ {item_price} DonorCoin?",
        reply_markup=kb
    )
    await state.set_state(ShopStates.confirm_purchase)
    await callback.answer()


@dp.callback_query(ShopStates.confirm_purchase, F.data.startswith("confirm_buy_"))
async def process_purchase(callback: types.CallbackQuery, state: FSMContext):
    item_id = int(callback.data.split("_")[2])
    donor_id = callback.from_user.id

    donor = get_donor_by_telegram_id(donor_id)
    if not donor:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    items = {
        1: {'name': '–§—É—Ç–±–æ–ª–∫–∞ "–Ø –¥–æ–Ω–æ—Ä"', 'price': 300},
        2: {'name': '–ó–Ω–∞—á–æ–∫ –¥–æ–Ω–æ—Ä–∞', 'price': 150},
        3: {'name': '–¢–µ—Ä–º–æ—Å', 'price': 500},
        4: {'name': '–ë—Ä–∞—Å–ª–µ—Ç', 'price': 200}
    }

    item = items.get(item_id)
    if not item:
        await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    if donor['donor_coin'] < item['price']:
        await callback.message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ DonorCoin –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
        await state.clear()
        return
    new_balance = donor['donor_coin'] - item['price']
    update_donor(donor_id, {'donor_coin': new_balance})

    await callback.message.answer(
        "üéâ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
        f"üõçÔ∏è –¢–æ–≤–∞—Ä: <b>{item['name']}</b>\n"
        f"üí∞ –°–ø–∏—Å–∞–Ω–æ: <b>{item['price']} DonorCoin</b>\n\n"
        "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
    )

    await state.clear()
    await callback.answer()


@dp.callback_query(F.data == "view_questions")
async def view_questions(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "‚ùì <b>–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –¥–æ–Ω–æ—Ä–æ–≤</b>\n\n"
        "–í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è. "
        "–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ Excel."
    )
    await callback.answer()


@dp.callback_query(F.data == "make_mailing")
async def make_mailing(callback: types.CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë®‚Äçüéì –î–ª—è –ú–ò–§–ò", callback_data="mailing_mifi")],
            [InlineKeyboardButton(text="üë• –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö –¥–æ–Ω–æ—Ä–æ–≤", callback_data="mailing_external")],
            [InlineKeyboardButton(text="üì¢ –î–ª—è –≤—Å–µ—Ö", callback_data="mailing_all")]
        ]
    )

    await callback.message.answer(
        "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏:</b>",
        reply_markup=kb
    )
    await state.set_state(MailingStates.select_recipients)
    await callback.answer()


@dp.callback_query(MailingStates.select_recipients, F.data.startswith("mailing_"))
async def select_mailing_recipients(callback: types.CallbackQuery, state: FSMContext):
    mailing_type = callback.data.split("_")[1]
    await state.update_data(mailing_type=mailing_type)

    await callback.message.answer(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(MailingStates.input_message)
    await callback.answer()


@dp.message(MailingStates.input_message)
async def input_mailing_message(message: types.Message, state: FSMContext):
    mailing_text = message.text.strip()
    if len(mailing_text) < 10:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    await state.update_data(mailing_text=mailing_text)

    data = await state.get_data()
    mailing_type = data['mailing_type']

    recipient_type = ""
    if mailing_type == "mifi":
        recipient_type = "–¥–ª—è –ú–ò–§–ò (—Å—Ç—É–¥–µ–Ω—Ç—ã –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏)"
    elif mailing_type == "external":
        recipient_type = "–¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –¥–æ–Ω–æ—Ä–æ–≤"
    else:
        recipient_type = "–¥–ª—è –≤—Å–µ—Ö –¥–æ–Ω–æ—Ä–æ–≤"

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="mailing_confirm")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="mailing_cancel")]
        ]
    )

    await message.answer(
        f"üì¢ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É</b>\n\n"
        f"<b>–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:</b> {recipient_type}\n\n"
        f"<b>–¢–µ–∫—Å—Ç:</b>\n{mailing_text}",
        reply_markup=kb
    )
    await state.set_state(MailingStates.confirm)
    await state.update_data(mailing_text=mailing_text)


@dp.callback_query(MailingStates.confirm, F.data == "mailing_confirm")
async def confirm_mailing(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    mailing_type = data['mailing_type']
    mailing_text = data['mailing_text']

    donors = get_all_donors()
    recipients = []

    for donor in donors:
        if not donor['mailing_consent']:
            continue

        if mailing_type == "mifi" and donor['category'] in ['—Å—Ç—É–¥–µ–Ω—Ç', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫']:
            recipients.append(donor['telegram_id'])
        elif mailing_type == "external" and donor['category'] == '–≤–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä':
            recipients.append(donor['telegram_id'])
        elif mailing_type == "all":
            recipients.append(donor['telegram_id'])

    success = 0
    failed = 0

    for recipient in recipients:
        try:
            await bot.send_message(
                recipient,
                f"üì¢ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n{mailing_text}"
            )
            success += 1
        except Exception as e:
            logger.error(f"Error sending mailing to {recipient}: {e}")
            failed += 1

    await callback.message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}"
    )
    await state.clear()
    await callback.answer()


@dp.callback_query(F.data == "create_dd")
async def create_donation_day(callback: types.CallbackQuery):
    await callback.message.answer(
        "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è –î–Ω—è –î–æ–Ω–æ—Ä–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏."
    )
    await callback.answer()


@dp.callback_query(F.data == "stats")
async def show_stats(callback: types.CallbackQuery):
    stats = get_donations_stats()
    donors = get_all_donors()

    students = sum(1 for d in donors if d['category'] == '—Å—Ç—É–¥–µ–Ω—Ç')
    staff = sum(1 for d in donors if d['category'] == '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫')
    external = sum(1 for d in donors if d['category'] == '–≤–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä')
    total_coins = sum(d.get('donor_coin', 0) for d in donors)

    await callback.message.answer(
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"<b>–í—Å–µ–≥–æ –¥–æ–Ω–æ—Ä–æ–≤:</b> {stats['total_donors']}\n"
        f"<b>–°—Ç—É–¥–µ–Ω—Ç–æ–≤:</b> {students}\n"
        f"<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b> {staff}\n"
        f"<b>–í–Ω–µ—à–Ω–∏—Ö –¥–æ–Ω–æ—Ä–æ–≤:</b> {external}\n\n"
        f"<b>–í—Å–µ–≥–æ –¥–æ–Ω–∞—Ü–∏–π –≤ –ì–∞–≤—Ä–∏–ª–æ–≤–∞:</b> {stats['total_gavrilovo']}\n"
        f"<b>–í—Å–µ–≥–æ –¥–æ–Ω–∞—Ü–∏–π –≤ –§–ú–ë–ê:</b> {stats['total_fmba']}\n"
        f"<b>–í—Å–µ–≥–æ –¥–æ–Ω–∞—Ü–∏–π:</b> {stats['total_donations']}\n\n"
        f"<b>–í—Å–µ–≥–æ DonorCoin –≤ —Å–∏—Å—Ç–µ–º–µ:</b> {total_coins}"
    )
    await callback.answer()


@dp.callback_query(F.data == "manage_shop")
async def manage_shop(callback: types.CallbackQuery):
    await callback.message.answer(
        "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏."
    )
    await callback.answer()


@dp.callback_query(F.data == "export_data")
async def export_data(callback: types.CallbackQuery):
    try:
        with open(EXCEL_FILE, 'rb') as file:
            await bot.send_document(
                chat_id=callback.from_user.id,
                document=types.BufferedInputFile(
                    file.read(),
                    filename="donor_data.xlsx"
                ),
                caption="üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–Ω–æ—Ä–æ–≤"
            )
    except Exception as e:
        logger.error(f"Error exporting data: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")

    await callback.answer()


@dp.callback_query(F.data.in_(["back_to_shop", "back_to_cabinet"]))
async def handle_back_buttons(callback: types.CallbackQuery, state: FSMContext):
    try:
        if callback.data == "back_to_shop":
            await show_shop(callback, state)
        else:
            await state.clear()
            await callback.message.delete()
            await show_personal_cabinet(callback.message)
    except Exception as e:
        logger.error(f"Error handling back button: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    await callback.answer()


@dp.callback_query(ShopStates.browse, F.data == "back_to_cabinet")
@dp.callback_query(ShopStates.view_item, F.data == "back_to_cabinet")
@dp.callback_query(ShopStates.confirm_purchase, F.data == "back_to_cabinet")
async def back_to_cabinet_from_shop(callback: types.CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await callback.message.delete()
        await show_personal_cabinet(callback.message)
    except Exception as e:
        logger.error(f"Error returning to cabinet: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    await callback.answer()


@dp.message(Command("cabinet"))
async def cmd_cabinet(message: types.Message):
    if await is_organizer(message.from_user.id):
        await show_organizer_panel(message)
    elif not await is_user_registered(message.from_user.id):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏ /start")
    else:
        await show_personal_cabinet(message)


if __name__ == "__main__":
    import asyncio
    init_excel()

    logger.info("Starting bot...")
    asyncio.run(dp.start_polling(bot))
