from typing import Final, Optional
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
from datetime import datetime, timedelta
import sqlite3
import re

TOKEN: Final = '8164683944:AAFblJC8b6i_2_poEqb7qnMnLd0WElfgG6Q'
BOT_USERNAME: Final = '@MepiDonor_bot'

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

def init_db():
    conn = sqlite3.connect('donor_bot.db')
    cursor = conn.cursor()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS donors (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id INTEGER UNIQUE,
        phone TEXT NOT NULL,
        full_name TEXT NOT NULL,
        category TEXT,
        group_name TEXT,
        dkm_member BOOLEAN DEFAULT FALSE,
        consent BOOLEAN DEFAULT FALSE,
        registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS donations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        donor_id INTEGER,
        date DATE,
        center TEXT,
        gave_dkm_sample BOOLEAN DEFAULT FALSE,
        type TEXT,
        FOREIGN KEY (donor_id) REFERENCES donors (id)
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS donation_days (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date DATE UNIQUE,
        center TEXT,
        external_link TEXT
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS questions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        donor_id INTEGER,
        text TEXT,
        answer TEXT,
        status TEXT DEFAULT 'pending',
        FOREIGN KEY (donor_id) REFERENCES donors (id)
    )
    ''')

    conn.commit()
    conn.close()

init_db()

class RegistrationStates(StatesGroup):
    phone = State()
    full_name = State()
    category = State()
    group = State()
    consent = State()

class DonationDayStates(StatesGroup):
    select_day = State()
    confirm = State()

class QuestionStates(StatesGroup):
    input_question = State()

def validate_full_name(full_name: str) -> bool:
    pattern = r'^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+(?:\s[–ê-–Ø–Å][–∞-—è—ë]+)?$'
    return re.fullmatch(pattern, full_name) is not None

async def is_user_registered(telegram_id: int) -> bool:
    conn = sqlite3.connect('donor_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id FROM donors WHERE telegram_id = ?', (telegram_id,))
    result = cursor.fetchone()
    conn.close()
    return result is not None

async def get_user_info(telegram_id: int) -> Optional[dict]:
    conn = sqlite3.connect('donor_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT full_name, category, group_name, dkm_member 
        FROM donors WHERE telegram_id = ?
    ''', (telegram_id,))
    result = cursor.fetchone()
    conn.close()

    if result:
        return {
            'full_name': result[0],
            'category': result[1],
            'group': result[2],
            'dkm_member': bool(result[3])
        }
    return None

async def get_upcoming_donation_days() -> list:
    conn = sqlite3.connect('donor_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT id, date, center 
        FROM donation_days 
        WHERE date >= date('now') 
        ORDER BY date
    ''')
    days = cursor.fetchall()
    conn.close()

    return [{'id': day[0], 'date': day[1], 'center': day[2]} for day in days]

@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    if await is_user_registered(message.from_user.id):
        await show_personal_cabinet(message)
    else:
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –î–Ω—è –î–æ–Ω–æ—Ä–∞ –≤ –ù–ò–Ø–£ –ú–ò–§–ò.\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n"
            "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –¥–æ–Ω–æ—Ä\n"
            "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –î–µ–Ω—å –î–æ–Ω–æ—Ä–∞\n"
            "üìä –°–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π –¥–æ–Ω–∞—Ü–∏–π\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=kb
        )
        await state.set_state(RegistrationStates.phone)

@dp.message(RegistrationStates.phone, F.contact)
async def contact_received(message: types.Message, state: FSMContext):
    phone = message.contact.phone_number
    await state.update_data(phone=phone)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(RegistrationStates.full_name)

@dp.message(RegistrationStates.full_name)
async def full_name_received(message: types.Message, state: FSMContext):
    full_name = message.text.strip()

    if not validate_full_name(full_name):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –ø–æ–ª–Ω–æ–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<b>–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ</b> (–µ—Å–ª–∏ –µ—Å—Ç—å) —Å –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤.\n"
            "–ü—Ä–∏–º–µ—Ä: <i>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</i> –∏–ª–∏ <i>–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞</i>"
        )
        return

    await state.update_data(full_name=full_name)

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°—Ç—É–¥–µ–Ω—Ç")],
            [KeyboardButton(text="–°–æ—Ç—Ä—É–¥–Ω–∏–∫")],
            [KeyboardButton(text="–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=kb
    )
    await state.set_state(RegistrationStates.category)

@dp.message(RegistrationStates.category)
async def category_received(message: types.Message, state: FSMContext):
    category = message.text.lower()
    valid_categories = ['—Å—Ç—É–¥–µ–Ω—Ç', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '–≤–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä']

    if category not in valid_categories:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        return

    await state.update_data(category=category)

    if category == '—Å—Ç—É–¥–µ–Ω—Ç':
        await message.answer(
            "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(RegistrationStates.group)
    else:
        await state.update_data(group=None)
        await ask_for_consent(message, state)

@dp.message(RegistrationStates.group)
async def group_received(message: types.Message, state: FSMContext):
    group = message.text.strip()
    await state.update_data(group=group)
    await ask_for_consent(message, state)

async def ask_for_consent(message: types.Message, state: FSMContext):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ", callback_data="consent_yes")],
            [InlineKeyboardButton(text="‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_no")]
        ]
    )

    await message.answer(
        "‚ùó –ü–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ:\n\n"
        "–Ø —Å–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ "
        "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–æ–Ω–æ—Ä—Å—Ç–≤–æ–º –∫—Ä–æ–≤–∏.",
        reply_markup=kb
    )
    await state.set_state(RegistrationStates.consent)

@dp.callback_query(RegistrationStates.consent, F.data.startswith("consent_"))
async def consent_received(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "consent_no":
        await callback.message.answer(
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö "
            "–º—ã –Ω–µ –º–æ–∂–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –∫–∞–∫ –¥–æ–Ω–æ—Ä–∞."
        )
        await state.clear()
        return

    data = await state.get_data()

    conn = sqlite3.connect('donor_bot.db')
    cursor = conn.cursor()

    try:
        cursor.execute('''
            INSERT INTO donors (
                telegram_id, phone, full_name, category, group_name, consent
            ) VALUES (?, ?, ?, ?, ?, ?)
        ''', (
            callback.from_user.id,
            data['phone'],
            data['full_name'],
            data['category'],
            data.get('group'),
            True
        ))
        conn.commit()
    except sqlite3.IntegrityError:
        await callback.message.answer("‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        conn.close()
        await state.clear()
        return

    conn.close()

    await callback.message.answer(
        "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"<b>–§–ò–û:</b> {data['full_name']}\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {data['category']}\n"
        f"<b>–ì—Ä—É–ø–ø–∞:</b> {data.get('group', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –î–µ–Ω—å –î–æ–Ω–æ—Ä–∞ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
        reply_markup=ReplyKeyboardRemove()
    )

    await show_personal_cabinet(callback.message)
    await state.clear()

@dp.message(Command("cabinet"))
async def cmd_cabinet(message: types.Message):
    if not await is_user_registered(message.from_user.id):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏ /start")
        return

    await show_personal_cabinet(message)

async def show_personal_cabinet(message: types.Message):
    user_info = await get_user_info(message.from_user.id)
    if not user_info:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    conn = sqlite3.connect('donor_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT COUNT(*) FROM donations 
        WHERE donor_id = (
            SELECT id FROM donors WHERE telegram_id = ?
        )
    ''', (message.from_user.id,))
    donation_count = cursor.fetchone()[0]
    conn.close()

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –î–µ–Ω—å –î–æ–Ω–æ—Ä–∞", callback_data="register_dd")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="my_data")],
            [InlineKeyboardButton(text="ü©∏ –ò—Å—Ç–æ—Ä–∏—è –¥–æ–Ω–∞—Ü–∏–π", callback_data="donation_history")],
            [InlineKeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É", callback_data="ask_question")],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ", callback_data="donation_info")],
        ]
    )

    await message.answer(
        f"üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
        f"<b>–§–ò–û:</b> {user_info['full_name']}\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {user_info['category']}\n"
        f"<b>–ì—Ä—É–ø–ø–∞/—Å—Ç–∞—Ç—É—Å:</b> {user_info['group'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"<b>–î–æ–Ω–∞—Ü–∏–π:</b> {donation_count}\n"
        f"<b>–í —Ä–µ–≥–∏—Å—Ç—Ä–µ –î–ö–ú:</b> {'–î–∞' if user_info['dkm_member'] else '–ù–µ—Ç'}\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb
    )

@dp.callback_query(F.data.in_(["my_data", "donation_history", "donation_info", "ask_question"]))
async def cabinet_buttons_handler(callback: types.CallbackQuery):
    if callback.data == "my_data":
        await show_user_data(callback)
    elif callback.data == "donation_history":
        await show_donation_history(callback)
    elif callback.data == "donation_info":
        await show_donation_info(callback)
    elif callback.data == "ask_question":
        await ask_question(callback)

async def show_user_data(callback: types.CallbackQuery):
    user_info = await get_user_info(callback.from_user.id)
    if not user_info:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.")
        return

    await callback.message.answer(
        f"üìã <b>–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ</b>\n\n"
        f"<b>–§–ò–û:</b> {user_info['full_name']}\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {user_info['category']}\n"
        f"<b>–ì—Ä—É–ø–ø–∞/—Å—Ç–∞—Ç—É—Å:</b> {user_info['group'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"<b>–í —Ä–µ–≥–∏—Å—Ç—Ä–µ –î–ö–ú:</b> {'–î–∞' if user_info['dkm_member'] else '–ù–µ—Ç'}\n\n"
        "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É."
    )
    await callback.answer()

async def show_donation_history(callback: types.CallbackQuery):
    conn = sqlite3.connect('donor_bot.db')
    cursor = conn.cursor()

    cursor.execute('''
        SELECT d.id, d.date, d.center, d.gave_dkm_sample, d.type
        FROM donations d
        JOIN donors dr ON d.donor_id = dr.id
        WHERE dr.telegram_id = ?
        ORDER BY d.date DESC
    ''', (callback.from_user.id,))

    donations = cursor.fetchall()
    conn.close()

    if not donations:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–Ω–∞—Ü–∏–π.")
        await callback.answer()
        return

    text = "ü©∏ <b>–ò—Å—Ç–æ—Ä–∏—è –¥–æ–Ω–∞—Ü–∏–π</b>\n\n"
    for donation in donations:
        text += (
            f"<b>–î–∞—Ç–∞:</b> {donation[1]}\n"
            f"<b>–¶–µ–Ω—Ç—Ä:</b> {donation[2]}\n"
            f"<b>–¢–∏–ø:</b> {donation[4]}\n"
            f"<b>–°–¥–∞–ª –ø—Ä–æ–±–∏—Ä–∫—É –î–ö–ú:</b> {'–î–∞' if donation[3] else '–ù–µ—Ç'}\n\n"
        )

    await callback.message.answer(text)
    await callback.answer()

async def show_donation_info(callback: types.CallbackQuery):
    text = (
        "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ</b>\n\n"
        "üîπ <b>–ü–µ—Ä–µ–¥ —Å–¥–∞—á–µ–π –∫—Ä–æ–≤–∏:</b>\n"
        "- –í—ã—Å–ø–∏—Ç–µ—Å—å\n"
        "- –ü–∏—Ç–∞–π—Ç–µ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞ 2 –¥–Ω—è –¥–æ –¥–æ–Ω–∞—Ü–∏–∏\n"
        "- –ù–µ —É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –∞–ª–∫–æ–≥–æ–ª—å –∑–∞ 48 —á–∞—Å–æ–≤\n"
        "- –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã\n\n"
        "üîπ <b>–ü–æ—Å–ª–µ —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏:</b>\n"
        "- –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ 10-15 –º–∏–Ω—É—Ç\n"
        "- –ù–µ –∫—É—Ä–∏—Ç–µ 2 —á–∞—Å–∞\n"
        "- –ù–µ —Å–Ω–∏–º–∞–π—Ç–µ –ø–æ–≤—è–∑–∫—É 3-4 —á–∞—Å–∞\n"
        "- –ò–∑–±–µ–≥–∞–π—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫\n\n"
        "üìå –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ <a href='https://mephi.ru'>mephi.ru</a>"
    )
    await callback.message.answer(text, disable_web_page_preview=True)
    await callback.answer()

@dp.callback_query(F.data == "register_dd")
async def register_for_donation_day(callback: types.CallbackQuery, state: FSMContext):
    if not await is_user_registered(callback.from_user.id):
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏ /start")
        await callback.answer()
        return

    days = await get_upcoming_donation_days()
    if not days:
        await callback.message.answer("‚ùå –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –î–Ω–µ–π –î–æ–Ω–æ—Ä–∞.")
        await callback.answer()
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for day in days:
        kb.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{day['date']} ({day['center']})",
                callback_data=f"dd_day_{day['id']}"
            )
        ])

    await callback.message.answer(
        "üìÖ –í—ã–±–µ—Ä–∏ –î–µ–Ω—å –î–æ–Ω–æ—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏:",
        reply_markup=kb
    )
    await state.set_state(DonationDayStates.select_day)
    await callback.answer()

@dp.callback_query(DonationDayStates.select_day, F.data.startswith("dd_day_"))
async def donation_day_selected(callback: types.CallbackQuery, state: FSMContext):
    day_id = int(callback.data.split("_")[2])
    await state.update_data(day_id=day_id)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="dd_confirm")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="dd_cancel")]
        ]
    )

    conn = sqlite3.connect('donor_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT date, center FROM donation_days WHERE id = ?', (day_id,))
    day = cursor.fetchone()
    conn.close()

    if not day:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    await callback.message.answer(
        f"–¢—ã –≤—ã–±—Ä–∞–ª –î–µ–Ω—å –î–æ–Ω–æ—Ä–∞:\n\n"
        f"<b>–î–∞—Ç–∞:</b> {day[0]}\n"
        f"<b>–¶–µ–Ω—Ç—Ä:</b> {day[1]}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∑–∞–ø–∏—Å—å:",
        reply_markup=kb
    )
    await state.set_state(DonationDayStates.confirm)
    await callback.answer()

@dp.callback_query(DonationDayStates.confirm, F.data == "dd_confirm")
async def donation_day_confirmed(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    day_id = data['day_id']

    conn = sqlite3.connect('donor_bot.db')
    cursor = conn.cursor()

    cursor.execute('SELECT id, category FROM donors WHERE telegram_id = ?', (callback.from_user.id,))
    donor = cursor.fetchone()

    if not donor:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        conn.close()
        return

    donor_id, category = donor

    cursor.execute('SELECT date, center, external_link FROM donation_days WHERE id = ?', (day_id,))
    day = cursor.fetchone()

    if not day:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–µ–Ω—å –¥–æ–Ω–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        conn.close()
        return

    date, center, external_link = day

    if category == '–≤–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä' and external_link:
        await callback.message.answer(
            f"üîó –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ:\n{external_link}"
        )
        await state.clear()
        conn.close()
        return

    try:
        cursor.execute('''
            INSERT INTO donations (donor_id, date, center, type)
            VALUES (?, ?, ?, ?)
        ''', (donor_id, date, center, category))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Error registering for donation day: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        conn.close()
        return

    conn.close()

    await callback.message.answer(
        "‚úÖ –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –î–µ–Ω—å –î–æ–Ω–æ—Ä–∞!\n\n"
        f"<b>–î–∞—Ç–∞:</b> {date}\n"
        f"<b>–¶–µ–Ω—Ç—Ä:</b> {center}\n\n"
        "–ú—ã –ø—Ä–∏—à–ª–µ–º —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ —Å–æ–±—ã—Ç–∏—è."
    )
    await state.clear()
    await callback.answer()

@dp.callback_query(DonationDayStates.confirm, F.data == "dd_cancel")
async def donation_day_canceled(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
    await callback.answer()
async def ask_question(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É –î–Ω—è –î–æ–Ω–æ—Ä–∞. "
        "–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(QuestionStates.input_question)
    await callback.answer()

@dp.message(QuestionStates.input_question)
async def question_received(message: types.Message, state: FSMContext):
    question = message.text.strip()

    if len(question) < 10:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏.")
        return

    conn = sqlite3.connect('donor_bot.db')
    cursor = conn.cursor()

    cursor.execute('SELECT id FROM donors WHERE telegram_id = ?', (message.from_user.id,))
    donor = cursor.fetchone()

    if not donor:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        conn.close()
        return

    donor_id = donor[0]

    try:
        cursor.execute('''
            INSERT INTO questions (donor_id, text)
            VALUES (?, ?)
        ''', (donor_id, question))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Error saving question: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        conn.close()
        return

    conn.close()

    await message.answer(
        "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º. "
        "–ú—ã –ø—Ä–∏—à–ª–µ–º –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤."
    )
    await state.clear()

if __name__ == "__main__":
    import asyncio

    logger.info("Starting bot...")
    asyncio.run(dp.start_polling(bot))